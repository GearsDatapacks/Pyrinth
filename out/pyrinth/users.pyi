import datetime as dt
import pyrinth.models as models
import pyrinth.projects as projects
import typing
from _typeshed import Incomplete

class User:
    model: Incomplete
    def __init__(self, user_model: models.UserModel) -> None: ...
    def get_auth(self) -> str | None: ...
    def get_payout_history(self) -> User.PayoutHistory: ...
    def withdraw_balance(self, amount: int) -> typing.Literal[True]: ...
    def change_avatar(self, file_path) -> typing.Literal[True]: ...
    @staticmethod
    def get(id_: str, auth: Incomplete | None = ...) -> User: ...
    def get_date_created(self) -> dt.datetime: ...
    def get_followed_projects(self) -> list['projects.Project']: ...
    def get_notifications(self) -> list['User.Notification']: ...
    def get_amount_of_projects(self) -> int: ...
    def create_project(self, project_model, icon: str | None = ...) -> int: ...
    def get_projects(self) -> list['projects.Project']: ...
    def follow_project(self, id_: str) -> int: ...
    def unfollow_project(self, id_: str) -> int: ...
    @staticmethod
    def get_from_auth(auth: str) -> User: ...
    @staticmethod
    def from_id(id_: str) -> User: ...
    @staticmethod
    def from_ids(ids: list[str]) -> list['User']: ...
    class Notification:
        id: Incomplete
        user_id: Incomplete
        type: Incomplete
        title: Incomplete
        text: Incomplete
        link: Incomplete
        read: Incomplete
        created: Incomplete
        actions: Incomplete
        project_title: Incomplete
        def __init__(self, notification_json: dict) -> None: ...
    class PayoutHistory:
        all_time: Incomplete
        last_month: Incomplete
        payouts: Incomplete
        def __init__(self, all_time: float, last_month: float, payouts: list) -> None: ...
