import datetime as _datetime
import pyrinth.models as _models
import pyrinth.projects as _projects
import typing as _typing
from _typeshed import Incomplete

class User:
    model: Incomplete
    def __init__(self, user_model: _models._UserModel) -> None: ...
    @property
    def auth(self) -> str | None: ...
    @property
    def payout_history(self) -> User._PayoutHistory: ...
    def withdraw_balance(self, amount: int) -> _typing.Literal[True]: ...
    def change_avatar(self, file_path) -> _typing.Literal[True]: ...
    @staticmethod
    def get(id_: str, auth: Incomplete | None = ...) -> User: ...
    @property
    def date_created(self) -> _datetime.datetime: ...
    @property
    def followed_projects(self) -> list['_projects.Project']: ...
    @property
    def notifications(self) -> list['User._Notification']: ...
    @property
    def amount_of_projects(self) -> int: ...
    def create_project(self, project_model, icon: str | None = ...) -> int: ...
    @property
    def projects(self) -> list['_projects.Project']: ...
    def follow_project(self, id_: str) -> int: ...
    def unfollow_project(self, id_: str) -> int: ...
    @staticmethod
    def get_from_auth(auth: str) -> User: ...
    @staticmethod
    def from_id(id_: str) -> User: ...
    @staticmethod
    def from_ids(ids: list[str]) -> list['User']: ...
    class _Notification:
        id_: str
        user_id: str
        type: str
        title: str
        text: str
        link: str
        read: str
        created: str
        actions: str
        project_title: str
    class _PayoutHistory:
        all_time: Incomplete
        last_month: Incomplete
        payouts: Incomplete
        def __init__(self, all_time: float, last_month: float, payouts: list) -> None: ...
